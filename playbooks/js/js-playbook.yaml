commands_to_run:
  steps:
    - name: "Starting scan for JavaScript project"
      command: echo "Starting scan for JavaScript Project"
      stepno: 1
      
    - name: "Secret Scan with Detect Secrets"
      command: "detect-secrets -C ${scan_directory} scan > ${output_file}"
      parameters:
        scan_directory: "./lab/NodeGoat"
        output_file: "./command_outputs/js-scan/secrets.json"
      post_command: "echo Detect Secrets complete. Results stored in ${output_file}"
      post_parameters:
        output_file: "./command_outputs/js-scan/secrets.json"
      stepno: 2

    - name: "Vulnerability Scan with Grype"
      command: "grype dir:${scan_directory} -o json --file ${output_path}"
      parameters:
        scan_directory: "./lab/NodeGoat"
        output_type: "json"
        output_path: "./command_outputs/js-scan/grype.json"
      post_command: "echo Grype scan Complete. Results stored in ${output_path}"
      post_parameters:
        output_path: "./command_outputs/js-scan/"
      stepno: 3

    - name: "Dependency Scan with OWASP Dependency Check"
      command: "dependency-check/bin/dependency-check.sh --scan \"${scan_directory}\" --out ${output_path}"
      parameters:
        scan_directory: "./lab/NodeGoat"
        output_path: "./command_outputs/js-scan"
      post_command: "echo OWASP Dependency Check Complete. Results stored in ${output_path}"
      post_parameters:
        output_path: "./command_outputs/js-scan"
      stepno: 4

    - name: "SBOM Generation With Syft"
      command: syft ${scan_directory} --output cyclonedx-json >> ${output_path}/sbom.json
      parameters:
        scan_directory: "./lab/NodeGoat"
        output_path: "./command_outputs/js-scan"
      post_command: "echo Syft Scan Complete. Results stored in ${output_path}"
      stepno: 5

    # This step requires a configured instance of SonarQube with a desired project.
    # You can simply run "make up" to run the required Docker containers.
    # After the configuration on SonarQube, you must add the required parameters below to perform your scan.
    # Also, you must use a SonarScanner CLI instance. Command below will run the container image of the instance.
    # You can see the scan results on SonarQube UI.
    #- name: "SAST Scan with SonarQube"
    #  command: >
    #    docker run
    #    --rm
    #    --network=host
    #    -e SONAR_HOST_URL="<Enter the URL of SonarQube instance here. Usually, it is http://localhost:9000>"
    #    -e SONAR_SCANNER_OPTS="-Dsonar.projectKey= <Enter your project key here>"
    #    -e SONAR_TOKEN="<Enter your generated token here>"
    #    -v "<Enter the whole path of your project to be scanned here>:/usr/src"
    #    sonarsource/sonar-scanner-cli
    #  stepno: 8

    

    

