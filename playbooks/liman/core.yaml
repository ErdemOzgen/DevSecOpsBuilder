commands_to_run:
  steps:
    - name: "Starting scan for Liman MYS-core (with PHP)"
      command: echo "Starting scan for Liman MYS/core (with PHP)"
      stepno: 1
      
    - name: "Secret Scan with Detect Secrets"
      command: "detect-secrets -C ${scan_directory} scan > ${output_file}"
      parameters:
        scan_directory: "../Desktop/Liman_MYS/core"
        output_file: "../Desktop/Liman_MYS/results_core/secrets.json"
      post_command: "echo Detect Secrets complete. Results stored in ${output_directory}"
      post_parameters:
        output_directory: "../Desktop/Liman_MYS/results_core"
      stepno: 2

    - name: "Secret Scan with GitLeaks"
      command: docker run -v ${path_to_host_folder_to_scan}:/path -v ${output_path}:/output_path zricethezav/gitleaks:latest ${run_command_option} --source="/path" --report-format=json --report-path=/output_path/gitleaks_report.json
      parameters:
        path_to_host_folder_to_scan: "/home/aseren/Desktop/Liman_MYS/core"
        run_command_option: detect
        output_path: "/home/aseren/Desktop/Liman_MYS/results_core"
      post_command: echo GitLeaks complete. Results stored in ${output_path}"
      stepno: 3

    - name: "Vulnerability Scan with local-php-security-checker"
      command: " local-php-security-checker -path ${scan_directory} -format ${output_type} > ${output_path}"
      parameters:
        scan_directory: "../Desktop/Liman_MYS/core"
        output_type: "json"
        output_path: "../Desktop/Liman_MYS/results_core/php_vuln_checker.json"
      post_command: "echo local-php-security-checker scan Complete. Results stored in ${output_path}"
      post_parameters:
        output_path: "../Desktop/Liman_MYS/results_core"
      stepno: 4

    - name: "Vulnerability Scan with Grype"
      command: "grype dir:${scan_directory} -o json --file ${output_path}"
      parameters:
        scan_directory: "../Desktop/Liman_MYS/core"
        output_type: "json"
        output_path: "../Desktop/Liman_MYS/results_core/grype.json"
      post_command: "echo Grype scan Complete. Results stored in ${output_path}"
      post_parameters:
        output_path: "../Desktop/Liman_MYS/results_core/"
      stepno: 5

    - name: "Dependency Scan with OWASP Dependency Check"
      command: "dependency-check/bin/dependency-check.sh --scan \"${scan_directory}\" --out ${output_path}"
      parameters:
        scan_directory: "../Desktop/Liman_MYS/core"
        output_path: "../Desktop/Liman_MYS/results_core"
      post_command: "echo OWASP Dependency Check Complete. Results stored in ${output_path}"
      post_parameters:
        output_path: "../Desktop/Liman_MYS/results_core"
      stepno: 6

    - name: "SBOM Generation With Syft"
      command: syft ${scan_directory} --output cyclonedx-json >> ${output_path}/sbom.json
      parameters:
        scan_directory: "../Desktop/Liman_MYS/core"
        output_path: "../Desktop/Liman_MYS/results_core"
      post_command: "echo Syft Scan Complete. Results stored in ${output_path}"
      stepno: 7

    - name: "SBOM Scan with Grype"
      command: "grype sbom:${scan_path} -o json --file ${output_path}"
      parameters:
        scan_path: "../Desktop/Liman_MYS/results_core/sbom.json"
        output_type: "json"
        output_path: "../Desktop/Liman_MYS/results_core/grype_sbom_scan.json"
      post_command: "echo Grype scan Complete. Results stored in ${output_path}"
      post_parameters:
        output_path: "../Desktop/Liman_MYS/results_core/grype_sbom_scan.json"
      stepno: 8
    

    # This step requires a configured instance of SonarQube with a desired project.
    # You can simply run "make up" to run the required Docker containers.
    # After the configuration on SonarQube, you must add the required parameters below to perform your scan.
    # Also, you must use a SonarScanner CLI instance. Command below will run the container image of the instance.
    # You can see the scan results on SonarQube UI.
    - name: "SAST Scan with SonarQube"
      command: >
        docker run
        --rm
        --network=host
        -e SONAR_HOST_URL="http://localhost:9000"
        -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=liman"
        -e SONAR_TOKEN="sqp_f2f943f08cccc630be3f025d31434df9a40612e0"
        -v "/home/aseren/Desktop/Liman_MYS/core:/usr/src"
        sonarsource/sonar-scanner-cli
      stepno: 9

    

    

