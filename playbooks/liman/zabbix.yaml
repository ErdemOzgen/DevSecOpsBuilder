commands_to_run:
  steps:
    - name: "Starting scan for Liman MYS-zabbix-cleaner-go (with Go)"
      command: echo "Starting scan for Liman MYS/zabbix-cleaner-go (with Go)"
      stepno: 1
      
    - name: "Secret Scan with Detect Secrets"
      command: "detect-secrets -C ${scan_directory} scan > ${output_file}"
      parameters:
        scan_directory: "../Desktop/Liman_MYS/zabbix-cleaner-go"
        output_file: "../Desktop/Liman_MYS/results_zabbix/secrets.json"
      post_command: "echo Detect Secrets complete. Results stored in ${output_directory}"
      post_parameters:
        output_directory: "../Desktop/Liman_MYS/results_zabbix"
      stepno: 2

    - name: "Secret Scan with GitLeaks"
      command: docker run -v ${path_to_host_folder_to_scan}:/path -v ${output_path}:/output_path zricethezav/gitleaks:latest ${run_command_option} --source="/path" --report-format=json --report-path=/output_path/gitleaks_report.json
      parameters:
        path_to_host_folder_to_scan: "/home/aseren/Desktop/Liman_MYS/zabbix-cleaner-go"
        run_command_option: detect
        output_path: "/home/aseren/Desktop/Liman_MYS/results_zabbix"
      post_command: echo GitLeaks complete. Results stored in ${output_path}"
      stepno: 3
    
    - name: "Vulnerability Scan with Gosec"
      command: gosec -fmt=${output_type} -out=${output_path} ${scan_directory}/...
      parameters:
        scan_directory: ../Desktop/Liman_MYS/zabbix-cleaner-go
        output_type: "json"
        output_path: "../Desktop/Liman_MYS/results_zabbix/gosec.json"
      post_command: echo Gosec complete. Results stored in ${output_path}"
      stepno: 4

    - name: "Vulnerability Scan with Grype"
      command: "grype dir:${scan_directory} -o json --file ${output_path}"
      parameters:
        scan_directory: "../Desktop/Liman_MYS/zabbix-cleaner-go"
        output_type: "json"
        output_path: "../Desktop/Liman_MYS/results_zabbix/grype.json"
      post_command: "echo Grype scan Complete. Results stored in ${output_path}"
      post_parameters:
        output_path: "../Desktop/Liman_MYS/results_zabbix/"
      stepno: 5
    
    - name: "Dependency Scan with OWASP Dependency Check"
      command: "dependency-check/bin/dependency-check.sh --scan \"${scan_directory}\" --out ${output_path}"
      parameters:
        scan_directory: "../Desktop/Liman_MYS/zabbix-cleaner-go"
        output_path: "../Desktop/Liman_MYS/results_zabbix"
      post_command: "echo OWASP Dependency Check Complete. Results stored in ${output_path}"
      post_parameters:
        output_path: "../Desktop/Liman_MYS/results_zabbix"
      stepno: 6

    - name: "SBOM Generation With Syft"
      command: syft ${scan_directory} --output cyclonedx-json >> ${output_path}/sbom.json
      parameters:
        scan_directory: "../Desktop/Liman_MYS/zabbix-cleaner-go"
        output_path: "../Desktop/Liman_MYS/results_zabbix"
      post_command: "echo Syft Scan Complete. Results stored in ${output_path}"
      stepno: 7

    - name: "SBOM Scan with Grype"
      command: "grype sbom:${scan_path} -o json --file ${output_path}"
      parameters:
        scan_path: "../Desktop/Liman_MYS/results_zabbix/sbom.json"
        output_type: "json"
        output_path: "../Desktop/Liman_MYS/results_zabbix/grype_sbom_scan.json"
      post_command: "echo Grype scan Complete. Results stored in ${output_path}"
      post_parameters:
        output_path: "../Desktop/Liman_MYS/results_zabbix/grype_sbom_scan.json"
      stepno: 8

    - name: "SAST Scan with SonarQube"
      command: >
        docker run
        --rm
        --network=host
        -e SONAR_HOST_URL="http://localhost:9000"
        -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=zabbix"
        -e SONAR_TOKEN="sqp_2a67a918841d8654a85f2d1c464505f18e02fd91"
        -v "/home/aseren/Desktop/Liman_MYS/zabbix-cleaner-go:/usr/src"
        sonarsource/sonar-scanner-cli
      stepno: 9